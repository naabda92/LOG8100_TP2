name: "CI/CD pipeline"

on:
  workflow_dispatch:

jobs:     
  sonarCloud_scan:
    runs-on: ubuntu-latest
    needs: super_linter  # This job will run only after the 'build' job completes
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=naabda92_LOG8100_TP2
            -Dsonar.organization=naabda92
            #-Dsonar.sources=.
            #-Dsonar.scm.provider=git
            #-Dsonar.verbose=true
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .
          
  build:
    runs-on: ubuntu-latest
    needs: sonarCloud_scan  # This job will run only after the 'build' job completes
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build Docker images using Docker Compose
      - name: Build Docker images with Docker Compose
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml push
          
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

  deploy:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: build  # This job will run only after the 'build' job completes
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.13.15 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_DEV_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          stack: "container"

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build  # This job will run only after the 'build' job completes
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.13.15 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_PROD_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          stack: "container"
        
        
  zap_scan:
    runs-on: ubuntu-latest
    needs: deploy  # This job will run only after the 'build' job completes
    name: Zap scanning
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          target: 'http://log8100-tp210.eastus.azurecontainer.io:9090/'
          cmd_options: '-a -j'