name: "CI/CD pipeline V2"

on:
  workflow_dispatch:

jobs:    
  super_linter:
    name: Super-linter
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v7.1.0 # x-release-please-version
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
 
  sonarCloud_scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=naabda92_LOG8100_TP2
            -Dsonar.organization=naabda92
            #-Dsonar.sources=.
            #-Dsonar.scm.provider=git
            #-Dsonar.verbose=true
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .
          
  build:
    runs-on: ubuntu-latest
    needs: sonarCloud_scan  # This job will run only after the 'build' job completes
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build Docker images using Docker Compose
      - name: Build Docker images with Docker Compose
        run: |
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml push
          
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

  deploy_dev:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: build  # This job will run only after the 'build' job completes
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.13.15 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_DEV_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          stack: "container"

  deploy_prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build  # This job will run only after the 'build' job completes
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.13.15 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_PROD_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          stack: "container"
          
  zap_scan_dev:
    runs-on: ubuntu-latest
    name: dev - Zap scanning
    if: github.ref == 'refs/heads/develop'
    needs: deploy_dev  # This job will run only after the 'build' job completes
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.11.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          target: 'https://log8100-10-dev-2addd04e4cb7.herokuapp.com'
          cmd_options: '-x report_xml.xml -a'

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v3
        with:
          name: zap-reports-test
          path: |
            report_json.json
            report_md.md
            report_html.html
            report_xml.xml   
     # Step 4: Copy the ZAP reports to the desired location in the repository
      - name: Move ZAP Reports to repo
        run: |
          mv report_json.json docs/resources/app_dev/
          mv report_md.md docs/resources/app_dev/
          mv report_html.html docs/resources/app_dev/
          mv report_xml.xml docs/resources/app_dev/

      # Step 5: Commit and push the changes back to the repository
      - name: Commit ZAP Reports
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add docs/resources/app_dev/
          git commit -m "Add ZAP reports"
          git push https://x-access-token:${{ secrets.GIT_TOKEN }}@github.com/naabda92/LOG8100_TP2.git feature/xmlreport
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }} # GitHub token for authentication
          
  zap_scan_prod:
    runs-on: ubuntu-latest
    name: Prod - Zap scanning
    if: github.ref == 'refs/heads/main'
    needs: deploy_prod  # This job will run only after the 'build' job completes
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.11.0
        with:
          token: ${{ secrets.GIT_TOKEN }}
          target: 'https://log8100-10-prod-2addd04e4cb7.herokuapp.com'
          cmd_options: '-x report_xml.xml -a'

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v3
        with:
          name: zap-reports-test
          path: |
            report_json.json
            report_md.md
            report_html.html
            report_xml.xml   
     # Step 4: Copy the ZAP reports to the desired location in the repository
      - name: Move ZAP Reports to repo
        run: |
          mv report_json.json docs/resources/app_prod/
          mv report_md.md docs/resources/app_prod/
          mv report_html.html docs/resources/app_prod/
          mv report_xml.xml docs/resources/app_prod/

      # Step 5: Commit and push the changes back to the repository
      - name: Commit ZAP Reports
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add docs/resources/app_prod/
          git commit -m "Add ZAP reports"
          git push https://x-access-token:${{ secrets.GIT_TOKEN }}@github.com/naabda92/LOG8100_TP2.git feature/xmlreport
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }} # GitHub token for authentication
